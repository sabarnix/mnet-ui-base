// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Components loads 1`] = `
Object {
  "Accordion": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Accordion&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=accordion&module=%2Fsrc%2FAccordion.js",
      },
    ],
    "description": "An accordion containing collapsible panels.",
    "intrinsicElement": "div",
    "name": "Accordion",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": 0,
        "description": "Active panel index. If specified, Accordion will be a controlled 
component. This means that future panel changes will not work unless you
subscribe to onActive function and update activeIndex accordingly.",
        "format": "number
[number]",
        "name": "activeIndex",
      },
      Object {
        "defaultValue": true,
        "description": "Transition content in & out with a slide down animation.",
        "format": "boolean",
        "name": "animate",
      },
      Object {
        "description": "Array of AccordionPanels.",
        "format": "node",
        "name": "children",
      },
      Object {
        "description": "Function that will be called when the active index changes.
It will always send an array with currently active panel indexes.",
        "format": "function",
        "name": "onActive",
      },
      Object {
        "defaultValue": false,
        "description": "Allow multiple panels to be opened at once.",
        "format": "boolean",
        "name": "multiple",
      },
      Object {
        "defaultValue": Object {
          "tabContents": "Tab Contents",
        },
        "description": "Custom messages for Tabs. Used for accessibility by screen readers.",
        "format": "{
  tabContents: string
}",
        "name": "messages",
      },
    ],
    "usage": "import { Accordion, AccordionPanel } from 'mnet-ui-base';
<Accordion>
  <AccordionPanel label='Panel 1'>...</AccordionPanel>
  <AccordionPanel label='Panel 2'>...</AccordionPanel>
</Accordion>",
  },
  "AccordionPanel": Object {
    "description": "An Accordion panel.",
    "intrinsicElement": "div",
    "name": "AccordionPanel",
    "properties": Array [
      Object {
        "description": "The panel label.",
        "format": "string
node",
        "name": "label",
      },
      Object {
        "description": "If specified, the entire panel header will be managed by the caller.",
        "format": "node",
        "name": "header",
      },
    ],
  },
  "Anchor": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Anchor&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=anchor&module=%2Fsrc%2FAnchor.js",
      },
    ],
    "description": "A text link.",
    "details": "We have a separate component from the browser
base so we can style it. You can either set the icon and/or label properties
or just use children.",
    "intrinsicElement": "a",
    "name": "Anchor",
    "properties": Array [
      Object {
        "description": "Custom title to be used by screen readers.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "What color to use to indicate the selection.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the anchor is disabled.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "Hyperlink reference to place in the anchor.",
        "format": "string",
        "name": "href",
      },
      Object {
        "description": "Icon element to place in the anchor.",
        "format": "element",
        "name": "icon",
      },
      Object {
        "description": "Label text to place in the anchor.",
        "format": "node",
        "name": "label",
      },
      Object {
        "description": "Click handler. It can be used, for example,
        to add analytics and track who clicked in the anchor.",
        "format": "function",
        "name": "onClick",
      },
      Object {
        "defaultValue": false,
        "description": "Whether an icon and label should be reversed so that the
        icon is at the end of the anchor.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "description": "The font size is typically driven by the components containing
this component. But, it can be adjusted directly via this size property,
typically when it is not contained in a 'Heading', 'Paragraph', or 'Text'.",
        "format": "xsmall
small
medium
large
xlarge
xxlarge
string",
        "name": "size",
      },
      Object {
        "description": "The DOM tag or react component to use for the element.",
        "format": "string
function",
        "name": "as",
      },
    ],
    "usage": "import { Anchor } from 'mnet-ui-base';
<Anchor href={location} label='Label' />",
  },
  "Avatar": [Function],
  "Box": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Box&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=box&module=%2Fsrc%2FBox.js",
      },
    ],
    "description": "A container that lays out its contents in one direction. Box
      provides CSS flexbox capabilities for layout, as well as general
      styling of things like background color, border, and animation.",
    "intrinsicElement": "div",
    "name": "Box",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "How to align the contents along the cross axis.",
        "format": "start
center
end
baseline
stretch",
        "name": "align",
      },
      Object {
        "defaultValue": "stretch",
        "description": "How to align the contents when there is extra space in
        the cross axis.",
        "format": "start
center
end
between
around
stretch",
        "name": "alignContent",
      },
      Object {
        "description": "Animation effect(s) to use. 'duration' and 'delay' should
        be in milliseconds. 'jiggle' and 'pulse' types are intended for
        small elements, like icons.",
        "format": "fadeIn
fadeOut
jiggle
pulse
slideUp
slideDown
slideLeft
slideRight
zoomIn
zoomOut
{
  type: 
    fadeIn
    fadeOut
    jiggle
    pulse
    slideUp
    slideDown
    slideLeft
    slideRight
    zoomIn
    zoomOut,
  delay: number,
  duration: number,
  size: 
    xsmall
    small
    medium
    large
    xlarge
}
[
  fadeIn
  fadeOut
  jiggle
  pulse
  slideUp
  slideDown
  slideLeft
  slideRight
  zoomIn
  zoomOut
  {
    type: 
      fadeIn
      fadeOut
      jiggle
      pulse
      slideUp
      slideDown
      slideLeft
      slideRight
      zoomIn
      zoomOut,
    delay: number,
    duration: number,
    size: 
      xsmall
      small
      medium
      large
      xlarge
  }
]",
        "name": "animation",
      },
      Object {
        "description": "Either a color 
identifier to use for the background color. For example: 'neutral-1'. Or, a 
'url()' for an image. Dark is not needed if color is provided.",
        "format": "string
{
  color: 
    string
    {
      dark: string,
      light: string
    },
  dark: 
    boolean
    string,
  image: string,
  position: string,
  opacity: 
    string
    boolean
    number
    weak
    medium
    strong,
  repeat: 
    no-repeat
    repeat
    string,
  size: 
    cover
    contain
    string,
  light: string
}",
        "name": "background",
      },
      Object {
        "description": "A fixed or relative size along its container's main axis.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
xxlarge
full
1/2
1/3
2/3
1/4
2/4
3/4
auto
string",
        "name": "basis",
      },
      Object {
        "description": "Include a border. 'between' will place a border in the gap between
      child elements. You must have a 'gap' to use 'between'.",
        "format": "boolean
top
left
bottom
right
start
end
horizontal
vertical
all
between
{
  color: 
    string
    {
      dark: string,
      light: string
    },
  side: 
    top
    left
    bottom
    right
    start
    end
    horizontal
    vertical
    all
    between,
  size: 
    xsmall
    small
    medium
    large
    xlarge
    string,
  style: 
    solid
    dashed
    dotted
    double
    groove
    ridge
    inset
    outset
    hidden
}
[{
  color: 
    string
    {
      dark: string,
      light: string
    },
  side: 
    top
    left
    bottom
    right
    start
    end
    horizontal
    vertical
    all
    between,
  size: 
    xsmall
    small
    medium
    large
    xlarge
    string,
  style: 
    solid
    dashed
    dotted
    double
    groove
    ridge
    inset
    outset
    hidden
}]",
        "name": "border",
      },
      Object {
        "defaultValue": "column",
        "description": "The orientation to layout the child components in.",
        "format": "row
column
row-responsive
row-reverse
column-reverse",
        "name": "direction",
      },
      Object {
        "defaultValue": "none",
        "description": "Elevated height above the underlying context, indicated
        via a drop shadow.",
        "format": "none
xsmall
small
medium
large
xlarge
string",
        "name": "elevation",
      },
      Object {
        "description": "Whether flex-grow and/or flex-shrink is true and at a desired factor.",
        "format": "grow
shrink
boolean
{
  grow: number,
  shrink: number
}",
        "name": "flex",
      },
      Object {
        "description": "Whether the width and/or height should fill the container.",
        "format": "horizontal
vertical
boolean",
        "name": "fill",
      },
      Object {
        "defaultValue": true,
        "description": "When interactive via 'onClick', whether it should receive a focus
        outline.",
        "format": "boolean",
        "name": "focusIndicator",
      },
      Object {
        "description": "The amount of spacing between child elements. This
        should not be used in conjunction with 'wrap' as the gap elements
        will not wrap gracefully.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
string",
        "name": "gap",
      },
      Object {
        "description": "A fixed height.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
xxlarge
string
{
  min: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    xxlarge
    string,
  max: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    xxlarge
    string
}",
        "name": "height",
      },
      Object {
        "defaultValue": false,
        "description": "The hover indicator to apply when the user is mousing over the
button. An object can be also be specified for color index support:
{background: 'neutral-2'}. This prop is meant to be used only
with plain Buttons.",
        "format": "boolean
string
background
{
  color: string,
  dark: 
    boolean
    string,
  image: string,
  light: string,
  position: string,
  opacity: 
    string
    boolean
    number
    weak
    medium
    strong,
  repeat: 
    no-repeat
    repeat
    string,
  size: 
    cover
    contain
    string
}",
        "name": "hoverIndicator",
      },
      Object {
        "defaultValue": "stretch",
        "description": "How to align the contents along the main axis.",
        "format": "around
between
center
end
evenly
start
stretch",
        "name": "justify",
      },
      Object {
        "description": "Click handler. Setting this property adds additional attributes to
      the DOM for accessibility.",
        "format": "function",
        "name": "onClick",
      },
      Object {
        "description": "box overflow.",
        "format": "auto
hidden
scroll
visible
{
  horizontal: 
    auto
    hidden
    scroll
    visible,
  vertical: 
    auto
    hidden
    scroll
    visible
}
string",
        "name": "overflow",
      },
      Object {
        "defaultValue": "none",
        "description": "The amount of padding around the box contents. An
    object can be specified to distinguish horizontal padding, vertical
    padding, and padding on a particular side of the box",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "pad",
      },
      Object {
        "defaultValue": true,
        "description": "Whether margin, pad, and border
      sizes should be scaled for mobile environments.",
        "format": "boolean",
        "name": "responsive",
      },
      Object {
        "defaultValue": false,
        "description": "How much to round the corners.",
        "format": "boolean
xsmall
small
medium
large
xlarge
full
string
{
  corner: 
    top
    left
    bottom
    right
    top-left
    top-right
    bottom-left
    bottom-right,
  size: 
    xsmall
    small
    medium
    large
    xlarge
    string
}",
        "name": "round",
      },
      Object {
        "description": "The DOM tag to use for the element. NOTE: This is deprecated in favor
of indicating the DOM tag via the 'as' property.",
        "format": "string
function",
        "name": "tag",
      },
      Object {
        "defaultValue": "div",
        "description": "The DOM tag or react component to use for the element.",
        "format": "string
function",
        "name": "as",
      },
      Object {
        "description": "A fixed width.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
xxlarge
string
{
  min: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    xxlarge
    string,
  max: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    xxlarge
    string
}",
        "name": "width",
      },
      Object {
        "defaultValue": false,
        "description": "Whether children can wrap if they can't all fit.",
        "format": "boolean
reverse",
        "name": "wrap",
      },
    ],
    "usage": "import { Box } from 'mnet-ui-base';
<Box />",
  },
  "Button": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Button&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=button&module=%2Fsrc%2FButton.js",
      },
    ],
    "description": "A button.",
    "details": "You can provide a single function child that will be called with
      'hover' and 'focus' keys. This allows you to customize the rendering
      of the Button in those cases.",
    "intrinsicElement": "button",
    "name": "Button",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the button is active.",
        "format": "boolean",
        "name": "active",
      },
      Object {
        "description": "The DOM tag or react component to use for the element.",
        "format": "string
function",
        "name": "as",
      },
      Object {
        "description": "What color to use to indicate the selection.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the button is disabled.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the button expands to fill all of the available width and/or 
        height.",
        "format": "horizontal
vertical
boolean",
        "name": "fill",
      },
      Object {
        "defaultValue": true,
        "description": "Whether when 'plain' it should receive a focus outline.",
        "format": "boolean",
        "name": "focusIndicator",
      },
      Object {
        "defaultValue": "small",
        "description": "The amount of spacing between icon and label in the button.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
string",
        "name": "gap",
      },
      Object {
        "defaultValue": false,
        "description": "The hover indicator to apply when the user is mousing over the
button. An object can be also be specified for color index support:
{background: 'neutral-2'}. This prop is meant to be used only
with plain Buttons.",
        "format": "boolean
string
background
{
  color: string,
  dark: 
    boolean
    string,
  image: string,
  light: string,
  position: string,
  opacity: 
    string
    boolean
    number
    weak
    medium
    strong,
  repeat: 
    no-repeat
    repeat
    string,
  size: 
    cover
    contain
    string
}",
        "name": "hoverIndicator",
      },
      Object {
        "description": "If specified, the button will behave like an anchor tag.",
        "format": "string",
        "name": "href",
      },
      Object {
        "description": "Icon element to place in the button.",
        "format": "element",
        "name": "icon",
      },
      Object {
        "description": "Label text to place in the button.",
        "format": "node",
        "name": "label",
      },
      Object {
        "description": "Click handler. Not setting this property and not specifying a href
        causes the Button to be disabled.",
        "format": "function",
        "name": "onClick",
      },
      Object {
        "defaultValue": false,
        "description": "Whether this is a plain button with no border or pad.
          Non plain button will show both pad and border.
          The plain button has no border and unless the icon prop exist it has 
          no pad as well.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "defaultValue": false,
        "description": "Whether this is a primary button. There should be at most one per page
            or screen.",
        "format": "boolean",
        "name": "primary",
      },
      Object {
        "defaultValue": false,
        "description": "Whether an icon and label should be reversed so that the icon is at the
              end of the anchor.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "description": "Whether this is a secondary button.",
        "format": "boolean",
        "name": "secondary",
      },
      Object {
        "description": "The possible sizes of Button, that impacts the overall Button 
      padding, border radius, text size and line height. 
      'size' will not impact any icon related sizing.",
        "format": "small
medium
large",
        "name": "size",
      },
      Object {
        "description": "Specifies where to display the URL defined in the href property.",
        "format": "_self
_blank
_parent
_top",
        "name": "target",
      },
      Object {
        "defaultValue": "button",
        "description": "The type of button. Set the type to submit for the default button on 
                forms.",
        "format": "button
reset
submit",
        "name": "type",
      },
    ],
    "usage": "import { Button } from 'mnet-ui-base';
<Button primary label='Label' />",
  },
  "Calendar": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Calendar&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=calendar&module=%2Fsrc%2FCalendar.js",
      },
    ],
    "description": "A calendar of days displayed by month.
      It can be used to select a single date, a range of dates, or multiple
      individual dates.",
    "intrinsicElement": "div",
    "name": "Calendar",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": true,
        "description": "Whether to animate the calender as the user interacts with it.",
        "format": "boolean",
        "name": "animate",
      },
      Object {
        "description": "An array of two numbers indicating the limits on
        navigation in ISO8601 format",
        "format": "[string]",
        "name": "bounds",
      },
      Object {
        "description": "The selected date in ISO8601 format",
        "format": "string",
        "name": "date",
      },
      Object {
        "description": "Multiple selected dates in ISO8601 format.
      Items that are an array indicate a range of dates.",
        "format": "[
  string
  [string]
]",
        "name": "dates",
      },
      Object {
        "description": "Multiple dates in ISO8601 format that should not be
        selectable. Items that are an array indicate a range of dates.",
        "format": "[
  string
  [string]
]",
        "name": "disabled",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to show the days of the week.",
        "format": "boolean",
        "name": "daysOfWeek",
      },
      Object {
        "defaultValue": 0,
        "description": "The first day of the week. 0 for Sunday. 1 for Monday.",
        "format": "0
1",
        "name": "firstDayOfWeek",
      },
      Object {
        "description": "If specified, the entire calendar header will be managed by the caller.
The function passes the following options:

\`\`\`
  {
    date: Date,
    locale: string,
    onPreviousMonth: func,
    onNextMonth: func,
    previousInBound: bool,
    nextInBound: bool,
  }
\`\`\`

\`onPreviousMonth\` and \`onNextMonth\` are callbacks that will tell the 
calendar to move between months.
\`previousInBound\` and \`nextInBound\` are booleans that tell, when using 
\`bounds\`, if the current date is within that range. You can then use that 
to disable the previous and next buttons.
",
        "format": "function",
        "name": "header",
      },
      Object {
        "defaultValue": "en-US",
        "description": "The locale to use.",
        "format": "string",
        "name": "locale",
      },
      Object {
        "description": "Called with an ISO8601 date when the user navigates to a different
       month.",
        "format": "function",
        "name": "onReference",
      },
      Object {
        "description": "Called with an ISO8601 date when
      the user selects a day.
      For single select, make this the subsequent \`date\` property value.
      For multiple select or ranges, toggle values in \`dates\`.
      Not specifying this property makes the component read only.",
        "format": "function",
        "name": "onSelect",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to automatically manage multiple date selection as a range.
        When the user clicks the first date, onSelect will be called with that
        date. When the user selects another date, onSelect will be called with
        an array of two dates.",
        "format": "boolean",
        "name": "range",
      },
      Object {
        "description": "The date to show if \`date\` isn't set, in ISO8601 format",
        "format": "string",
        "name": "reference",
      },
      Object {
        "defaultValue": true,
        "description": "Whether to show the days from the previous and next months.",
        "format": "boolean",
        "name": "showAdjacentDays",
      },
      Object {
        "defaultValue": "medium",
        "description": "What size to make it.",
        "format": "small
medium
large
string",
        "name": "size",
      },
    ],
    "usage": "import { Calendar } from 'mnet-ui-base';
<Calendar />",
  },
  "Carousel": [Function],
  "CheckBox": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=CheckBox&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=checkbox&module=%2Fsrc%2FCheckBox.js",
      },
    ],
    "description": "A checkbox toggle control.",
    "intrinsicElement": "input",
    "name": "CheckBox",
    "properties": Array [
      Object {
        "defaultValue": false,
        "description": "Same as React <input checked={} />",
        "format": "boolean",
        "name": "checked",
      },
      Object {
        "defaultValue": false,
        "description": "Same as React <input disabled={} />. Also adds a hidden input element
      with the same name so form submissions work.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "The DOM id attribute value to use for the underlying <input/> element.",
        "format": "string",
        "name": "id",
      },
      Object {
        "description": "Label text to place next to the control.",
        "format": "node",
        "name": "label",
      },
      Object {
        "description": "The DOM name attribute value to use for the underlying <input/> 
      element.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user clicks the check box. It
      will be passed a React event object. The current state can be accessed
      via event.target.checked. Same as React <input onChange={} />.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to show the label in front of the checkbox.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to visualize it as a toggle switch.",
        "format": "boolean",
        "name": "toggle",
      },
      Object {
        "defaultValue": false,
        "description": "Whether state is indeterminate.
NOTE: This can only be used with non-toggle components",
        "format": "boolean",
        "name": "indeterminate",
      },
    ],
    "usage": "import { CheckBox } from 'mnet-ui-base';
<CheckBox />",
  },
  "CheckBoxGroup": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=CheckBoxGroup&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=checkboxgroup&module=%2Fsrc%2FCheckBoxGroup.js",
      },
    ],
    "description": "A group of CheckBoxes.",
    "intrinsicElement": "div",
    "name": "CheckBoxGroup",
    "properties": Array [
      Object {
        "description": "An array of the values for the checked options. 
      If options is provided as an object, the value array will be the values 
     that the valueKey maps to.",
        "format": "[
  number
  string
]",
        "name": "value",
      },
      Object {
        "defaultValue": undefined,
        "description": "Disables all options.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "When the options array contains objects, this property indicates how
        to determine the label of each option. If a string is
        provided, it is used as the key to retrieve each option's label.",
        "format": "string",
        "name": "labelKey",
      },
      Object {
        "description": "Required when used in the Context of Form and FormField.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user clicks on a CheckBox option. 
      It will pass a React event object with the additional CheckBoxGroup 
      properties of 'option' and 'value'.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Options can be either a string or an object of CheckBox props 
      excluding the 'checked' property, use CheckBoxGroup 'value' prop instead 
      of 'checked'.",
        "format": "[string]
[{

}]",
        "name": "options",
        "required": true,
      },
      Object {
        "description": "When the options array contains objects, this property indicates how
        to determine the value of each option. If a string is provided, 
        it is used as the key to retrieve each option's value.",
        "format": "string",
        "name": "valueKey",
      },
    ],
    "usage": "import { CheckBoxGroup } from 'mnet-ui-base';
        <CheckBoxGroup />",
  },
  "Clock": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Clock&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=clock&module=%2Fsrc%2FClock.js",
      },
    ],
    "description": "A clock with timezone awareness.",
    "intrinsicElement": Array [
      "div",
      "svg",
    ],
    "name": "Clock",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": 24,
        "description": "Whether to roll over the hours after 12 or after 24.",
        "format": "12
24
12
24",
        "name": "hourLimit",
      },
      Object {
        "description": "If the clock is running, this function will be called with the
      current time value each time it changes.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "defaultValue": "seconds",
        "description": "How precise a time to represent.",
        "format": "hours
minutes
seconds",
        "name": "precision",
      },
      Object {
        "defaultValue": "forward",
        "description": "Whether the clock should actively adjust time or be fixed to the
      time specified. 'backward' could be used as a countdown timer.",
        "format": "boolean
backward
forward",
        "name": "run",
      },
      Object {
        "defaultValue": "medium",
        "description": "Clock size",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
      Object {
        "description": "ISO8601 time or duration. For example: 'PT8H12M23S',
      'T08:12:23', or '2015-02-22T08:12:23'. Any included date
      portion will be ignored for an analog clock. If not provided, the
      current browser time will be used.",
        "format": "string",
        "name": "time",
      },
      Object {
        "defaultValue": "analog",
        "description": "What type of visualization to show.",
        "format": "analog
digital",
        "name": "type",
      },
    ],
    "usage": "import { Clock } from 'mnet-ui-base';
<Clock />",
  },
  "Collapsible": Object {
    "description": "Expand or collapse animation.",
    "intrinsicElement": "div",
    "name": "Collapsible",
    "properties": Array [
      Object {
        "description": "Whether or not the component should be open.",
        "format": "boolean",
        "name": "open",
      },
      Object {
        "defaultValue": "vertical",
        "description": "Direction to animate the collapsible content.",
        "format": "horizontal
vertical",
        "name": "direction",
      },
    ],
    "usage": "import { Collapsible } from 'mnet-ui-base';
<Collapsible open>test</Collapsible>",
  },
  "DataTable": [Function],
  "Drop": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Drop&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=drop&module=%2Fsrc%2FDrop.js",
      },
    ],
    "description": "A container that is overlaid next to a target.",
    "intrinsicElement": "div",
    "name": "Drop",
    "properties": Array [
      Object {
        "defaultValue": Object {
          "left": "left",
          "top": "top",
        },
        "description": "How to align the drop with respect to the target element. Not
        specifying a vertical or horizontal alignment will cause it to be
        aligned in the center.",
        "format": "{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}",
        "name": "align",
      },
      Object {
        "description": "Function that will be invoked when the user clicks outside the drop.",
        "format": "function",
        "name": "onClickOutside",
      },
      Object {
        "description": "Function that will be called when the user presses the escape key inside
       the drop.",
        "format": "function",
        "name": "onEsc",
      },
      Object {
        "defaultValue": "auto",
        "description": "How to control the overflow inside the drop.",
        "format": "auto
hidden
scroll
visible
{
  horizontal: 
    auto
    hidden
    scroll
    visible,
  vertical: 
    auto
    hidden
    scroll
    visible
}
string",
        "name": "overflow",
      },
      Object {
        "defaultValue": true,
        "description": "Whether to dynamically re-place when resized.",
        "format": "boolean",
        "name": "responsive",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the drop should control focus.",
        "format": "boolean",
        "name": "restrictFocus",
      },
      Object {
        "defaultValue": true,
        "description": "Whether the drop element should be stretched to at least match the
      width of the target element. The default is true because
      that is what most uses of Drop want, like Select and Menu.",
        "format": "boolean",
        "name": "stretch",
      },
      Object {
        "description": "Target where the drop will be aligned to. This should be a React
      reference.",
        "format": "object",
        "name": "target",
        "required": true,
      },
      Object {
        "description": "Elevated height of the target, indicated via a drop shadow.",
        "format": "none
xsmall
small
medium
large
xlarge
string",
        "name": "elevation",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the drop element should have no background nor shadow",
        "format": "boolean",
        "name": "plain",
      },
    ],
    "usage": "import { Drop } from 'mnet-ui-base';
      
<Drop target={reference}>...</Drop>",
  },
  "DropButton": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=DropButton&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=dropbutton&module=%2Fsrc%2FDropButton.js",
      },
    ],
    "description": "A Button that controls a Drop. When opened, the Drop will contain
      whatever is specified via \`dropContent\`. The Drop will control the focus
      so that the contents behind it are not focusable. All properties and 
      theme properties of Button or Drop can be passed through.
      ",
    "intrinsicElement": "button",
    "name": "DropButton",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the button should be disabled.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "defaultValue": Object {
          "left": "left",
          "top": "top",
        },
        "description": "How to align the drop with respect to the button.",
        "format": "{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}",
        "name": "dropAlign",
      },
      Object {
        "description": "Content to put inside the Drop.",
        "format": "element",
        "name": "dropContent",
        "required": true,
      },
      Object {
        "description": "Target where the drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the DropButton itself by default.",
        "format": "object",
        "name": "dropTarget",
      },
      Object {
        "description": "Any valid Drop prop.",
        "format": "object",
        "name": "dropProps",
      },
      Object {
        "description": "Callback for when the drop is closed",
        "format": "function",
        "name": "onClose",
      },
      Object {
        "description": "Callback for when the drop is opened",
        "format": "function",
        "name": "onOpen",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the drop should be open or not. Setting this property does not
      influence user interaction after it has been rendered.",
        "format": "boolean",
        "name": "open",
      },
    ],
    "usage": "import { DropButton } from 'mnet-ui-base';
<DropButton dropContent={...} />",
  },
  "Form": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Form&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=form&module=%2Fsrc%2FForm.js",
      },
    ],
    "description": "A form that manages state for its fields.",
    "intrinsicElement": "form",
    "name": "Form",
    "properties": Array [
      Object {
        "defaultValue": Object {},
        "description": "An object representing any errors in the data. They keys should
        match the keys in the value object.",
        "format": "{

}",
        "name": "errors",
      },
      Object {
        "defaultValue": Object {},
        "description": "An object representing any information details in the data.
        They keys should match the keys in the value object.",
        "format": "{

}",
        "name": "infos",
      },
      Object {
        "defaultValue": Object {
          "invalid": "invalid",
          "required": "required",
        },
        "description": "Custom validation messages.",
        "format": "{
  invalid: string,
  required: string
}",
        "name": "messages",
      },
      Object {
        "description": "Function that will be called when any fields are updated.
      The fields must have a non-null \`name\` property assigned.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Function that will be called when the form is submitted. The
      single argument is an event containing the latest value object
      via \`event.value\` and an object indicating which fields were
      touched via \`event.touched\`.",
        "format": "function",
        "name": "onSubmit",
      },
      Object {
        "description": "Function that will be called when the form is reset. The
      single argument is the event provided by react.",
        "format": "function",
        "name": "onReset",
      },
      Object {
        "defaultValue": "submit",
        "description": "When to perform validation",
        "format": "blur
submit",
        "name": "validate",
      },
      Object {
        "defaultValue": Object {},
        "description": "An object representing all of the data in the form.",
        "format": "{

}",
        "name": "value",
      },
    ],
    "usage": "import { Form } from 'mnet-ui-base';
<Form />",
  },
  "FormContext": Object {
    "$$typeof": Symbol(react.context),
    "Consumer": Object {
      "$$typeof": Symbol(react.context),
      "_calculateChangedBits": null,
      "_context": [Circular],
    },
    "Provider": Object {
      "$$typeof": Symbol(react.provider),
      "_context": [Circular],
    },
    "_calculateChangedBits": null,
    "_currentRenderer": null,
    "_currentRenderer2": null,
    "_currentValue": Object {
      "useFormContext": [Function],
    },
    "_currentValue2": Object {
      "useFormContext": [Function],
    },
    "_threadCount": 0,
  },
  "FormField": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=FormField&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=formfield&module=%2Fsrc%2FFormField.js",
      },
    ],
    "description": "A single field in a form. FormField wraps an input component with
      a label, help, and/or error messaging. It typically contains an input
      control like TextInput, TextArea, Select, etc.",
    "intrinsicElement": "div",
    "name": "FormField",
    "properties": Array [
      Object {
        "description": "The component to insert in the FormField. MnetUIBase will add update the
      form values when this field changes. Any additional properties
      (such as initial value) you pass to FormField will be forwarded to this
      component. The component may be custom as long it supports the properties
      of name, value, onChange (event => {}), while event has either event.value
      or event.target.value.",
        "format": "function
object",
        "name": "component",
      },
      Object {
        "description": "Whether the field should look disabled.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "Any error text describing issues with the field's value",
        "format": "string
node",
        "name": "error",
      },
      Object {
        "description": "Any help text describing how the field works",
        "format": "string
node",
        "name": "help",
      },
      Object {
        "description": "The id of the input element contained in this field",
        "format": "string",
        "name": "htmlFor",
      },
      Object {
        "description": "Any informational text regarding the field's value",
        "format": "string
node",
        "name": "info",
      },
      Object {
        "description": "A short label describing the field",
        "format": "string
node",
        "name": "label",
      },
      Object {
        "description": "The name of the value data when in a Form and the name of
      the input field.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "The width of the field.",
        "format": "string",
        "name": "width",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Whether to add padding to align with the padding of TextInput.",
        "format": "boolean",
        "name": "pad",
      },
      Object {
        "description": "Whether the field is required.",
        "format": "boolean",
        "name": "required",
      },
      Object {
        "description": "Validation rule when used within a grommet Form. Provide an object
      with a regular expression, a function, or an array of these. If a
      function is provided, it will be called with two arguments, the value
      for this field and the entire value object. This permits validation to
      encompass multiple fields. The function should return a string message
      describing the validation issue, if any, or an object with 'message'
      and 'status' properties.",
        "format": "{
  regexp: object,
  message: 
    string
    node,
  status: 
    error
    info
}
function
[
  {
    regexp: object,
    message: 
      string
      node,
    status: 
      error
      info
  }
  function
]",
        "name": "validate",
      },
    ],
    "usage": "import { FormField } from 'mnet-ui-base';
<FormField />",
  },
  "Grid": [Function],
  "Header": [Function],
  "Heading": [Function],
  "Image": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Image&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=image&module=%2Fsrc%2FImage.js",
      },
    ],
    "description": "An image.",
    "intrinsicElement": "img",
    "name": "Image",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Whether the width and/or height should fill the container.",
        "format": "horizontal
vertical
boolean",
        "name": "fill",
      },
      Object {
        "description": "How the image fills its container.",
        "format": "cover
contain",
        "name": "fit",
      },
      Object {
        "description": "Specifies the URL of the fallback image used when 
      src is failing to load",
        "format": "string",
        "name": "fallback",
      },
      Object {
        "description": "Transparency of the image.",
        "format": "weak
medium
strong
string
boolean",
        "name": "opacity",
      },
    ],
    "usage": "import { Image } from 'mnet-ui-base';
<Image/>",
  },
  "InfiniteScroll": [Function],
  "Keyboard": [Function],
  "Layer": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Layer&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=layer&module=%2Fsrc%2FLayer.js",
      },
    ],
    "description": "An overlay. Layer is typically modal and anchored to an edge, corner, or
      center of the window. It is the caller's responsibility to provide a
      control for the user to close the layer.",
    "intrinsicElement": "div",
    "name": "Layer",
    "properties": Array [
      Object {
        "defaultValue": true,
        "description": "Whether to animate the Layer content when it opens. This
        property is deprecated and will be removed in the next major version
        of grommet. Instead, use 'animation'.",
        "format": "boolean",
        "name": "animate",
      },
      Object {
        "defaultValue": "slide",
        "description": "Animation transition of the Layer content when it opens and closes.",
        "format": "slide
fadeIn
none
boolean",
        "name": "animation",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the width and/or height should fill the current viewport 
        size.",
        "format": "boolean
vertical
horizontal",
        "name": "full",
      },
      Object {
        "description": "The amount of margin around the Layer. An object can be specified to
distinguish horizontal margin, vertical margin, and margin on a
particular side of the layer",
        "format": "none
xxsmall
xsmall
small
medium
large
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": true,
        "description": "Whether there should be an overlay preventing interaction underneath 
        the layer.",
        "format": "boolean",
        "name": "modal",
      },
      Object {
        "description": "Function that will be invoked on modal layers when the user clicks 
      outside the layer.",
        "format": "function",
        "name": "onClickOutside",
      },
      Object {
        "description": "Function that will be called when the user presses the escape key inside
       the layer.",
        "format": "function",
        "name": "onEsc",
      },
      Object {
        "defaultValue": false,
        "description": "Whether this is a plain Layer with no background color or border.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "defaultValue": "center",
        "description": "Position of the layer content.",
        "format": "bottom
bottom-left
bottom-right
center
end
hidden
left
right
start
top
top-left
top-right",
        "name": "position",
      },
      Object {
        "defaultValue": true,
        "description": "Whether the layer should take full width and height on mobile",
        "format": "boolean",
        "name": "responsive",
      },
      Object {
        "description": "Target where the layer will be aligned to. This should be a React 
      reference.",
        "format": "object",
        "name": "target",
      },
    ],
    "usage": "import { Layer } from 'mnet-ui-base';
<Layer />",
  },
  "List": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=List&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=list&module=%2Fsrc%2FList.js",
      },
    ],
    "description": "An ordered list of items.",
    "intrinsicElement": "ol",
    "name": "List",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": "ul",
        "description": "The DOM tag or react component to use for the element.",
        "format": "string",
        "name": "as",
      },
      Object {
        "description": "Item background. An array value indicates that items should have
      different backgrounds, modulo the array index.",
        "format": "string
[string]",
        "name": "background",
      },
      Object {
        "description": "Item border.",
        "format": "boolean
horizontal
vertical
top
bottom
left
right
start
end
{
  color: 
    string
    {
      dark: string,
      light: string
    },
  side: 
    horizontal
    vertical
    top
    bottom
    left
    right
    start
    end,
  size: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}",
        "name": "border",
      },
      Object {
        "description": "Array of data objects.",
        "format": "[
  string
  {

  }
]",
        "name": "data",
      },
      Object {
        "description": "Function that will be called when each data item is rendered.
      It will be passed three arguments, the individual data item, its index,
      and an object indicating the state of the item, if any. It
      should return a react element.
      For example:
      \`children={(item, index, { active }) => <Box ...>{...}</Box>}\`
      ",
        "format": "function",
        "name": "children",
      },
      Object {
        "description": "Item specific background, border, and pad, keyed by data index.
      For example:
      { 27: { background: ..., border: ..., pad: ... }},
      where the background, border, and pad accept the same values as
      the same named properties on List.",
        "format": "{

}",
        "name": "itemProps",
      },
      Object {
        "description": "Use this to indicate that 'data' doesn't contain all that it could.
      It will be called when all of the data items have been rendered.
      This might be used when the total number of items that could be retrieved
      is more than you'd want to load into the browser. 'onMore' allows you
      to lazily fetch more from the server only when needed.",
        "format": "function",
        "name": "onMore",
      },
      Object {
        "description": "When supplied, this function will be called with an event object that
      include a 'item' property containing the data value associated with
      the clicked item and an 'index' property containing the index in 'data'
      of the clicked item. You should not include interactive elements, like
      Anchor or Button inside 'primaryKey' or 'secondaryKey' as that can
      cause confusion with overlapping interactive elements.",
        "format": "function",
        "name": "onClickItem",
      },
      Object {
        "description": "Item padding.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
string
{
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
}",
        "name": "pad",
      },
      Object {
        "description": "When a string is supplied, it indicates the property in a data item
      object to use to get the primary content. If a function is supplied, it
      will be called with the current data item object and should return
      a React element that will be rendered as the primary content.",
        "format": "string
function",
        "name": "primaryKey",
      },
      Object {
        "description": "When a string is supplied, it indicates the property in a data item
      object to use to get the secondary content. If a function is supplied, it
      will be called with the current data item object and should return
      a React element that will be rendered as the secondary content.",
        "format": "string
function",
        "name": "secondaryKey",
      },
      Object {
        "defaultValue": 50,
        "description": "How many items to render at a time.",
        "format": "number",
        "name": "step",
      },
    ],
    "usage": "import { List } from 'mnet-ui-base';
<List data={[...]} />",
  },
  "Loader": Object {
    "$$typeof": Symbol(react.forward_ref),
    "displayName": "Loader",
    "render": [Function],
  },
  "Main": [Function],
  "Markdown": [Function],
  "MaskedInput": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=MaskedInput&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=maskedinput&module=%2Fsrc%2FMaskedInput.js",
      },
    ],
    "description": "An input field with formalized syntax.",
    "intrinsicElement": "input",
    "name": "MaskedInput",
    "properties": Array [
      Object {
        "description": "An optional icon to show. This could be used to provide an
      indication of what kind of input is expected, like an email icon,
      or what the input will be used for, like a search icon.",
        "format": "element",
        "name": "icon",
      },
      Object {
        "description": "The id attribute of the input.",
        "format": "string",
        "name": "id",
      },
      Object {
        "description": "The name attribute of the input.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user types or pastes text.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Function that will be called when the user leaves the field.",
        "format": "function",
        "name": "onBlur",
      },
      Object {
        "description": "Describes the structure of the mask. If a regexp is provided, it should
      allow both the final full string element as well as partial strings
      as the user types characters one by one.",
        "format": "[{
  length: 
    number
    [number],
  fixed: string,
  options: [
  string
  number
],
  regexp: 
    {

    }
}]",
        "name": "mask",
      },
      Object {
        "description": "Whether an icon should be reversed so that the icon is at the
      end of the input.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "description": "The size of the text.",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
      Object {
        "description": "What text to put in the input. The caller should ensure that it
      is initially valid with respect to the mask.",
        "format": "string
number",
        "name": "value",
      },
    ],
    "usage": "import { MaskedInput } from 'mnet-ui-base';
<MaskedInput id='item' name='item' />",
  },
  "Menu": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Menu&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=menu&module=%2Fsrc%2FMenu.js",
      },
    ],
    "description": "A control that opens a Drop containing plain Buttons.",
    "details": "The labels and behavior of the contained Buttons are described
      via the \`items\` property.
      You can provide a single function child that will be called with
      'hover', 'focus', and 'drop' keys. This allows you to customize
      the rendering of the Menu button in those cases.",
    "intrinsicElement": "button",
    "name": "Menu",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the menu should be disabled.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "defaultValue": Object {
          "left": "left",
          "top": "top",
        },
        "description": "Where to place the drop down.
The keys correspond to a side of the drop down.
The values correspond to a side of the control. For instance,
{left: 'left', top: 'bottom'} would align the left edges and the top of
the drop down to the bottom of the control. At most one of left or right and
one of top or bottom should be specified.",
        "format": "{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  left: 
    right
    left,
  right: 
    right
    left
}",
        "name": "dropAlign",
      },
      Object {
        "description": "Background color when drop is active",
        "format": "string
{
  color: string,
  opacity: 
    boolean
    number
    weak
    medium
    strong
}",
        "name": "dropBackground",
      },
      Object {
        "description": "Target where the drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the Menu itself by default.",
        "format": "object",
        "name": "dropTarget",
      },
      Object {
        "defaultValue": Object {},
        "description": "Any valid Drop prop.",
        "format": "object",
        "name": "dropProps",
      },
      Object {
        "defaultValue": "start",
        "description": "How to align the contents along the row axis.",
        "format": "start
center
end
between
around
stretch",
        "name": "justifyContent",
      },
      Object {
        "description": "Indicates the icon shown as a control to open it.",
        "format": "boolean
node",
        "name": "icon",
      },
      Object {
        "defaultValue": Array [],
        "description": "Menu items to be placed inside the drop down.
The object values can be any Button prop, for example: label and onClick.",
        "format": "[object]",
        "name": "items",
        "required": true,
      },
      Object {
        "description": "Indicates the label shown as a control to open it.",
        "format": "string
node",
        "name": "label",
      },
      Object {
        "defaultValue": Object {
          "closeMenu": "Close Menu",
          "openMenu": "Open Menu",
        },
        "description": "Custom messages. Used for accessibility by screen readers. 
      These values will be overridden if an a11yTitle is provided.",
        "format": "{
  closeMenu: string,
  openMenu: string
}",
        "name": "messages",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the state of the component should be open",
        "format": "boolean",
        "name": "open",
      },
      Object {
        "defaultValue": "medium",
        "description": "The size of the menu.",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
    ],
    "usage": "import { Menu } from 'mnet-ui-base';
<Menu />",
  },
  "Meter": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Meter&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=meter&module=%2Fsrc%2FMeter.js",
      },
    ],
    "description": "A graphical meter.",
    "name": "Meter",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": Object {
          "color": "light-2",
          "opacity": "medium",
        },
        "description": "Background color",
        "format": "string
{
  color: string,
  opacity: 
    weak
    medium
    strong
    number
    boolean
}",
        "name": "background",
      },
      Object {
        "description": "The maximum value for the Meter.",
        "format": "number
string",
        "name": "max",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to round the line ends",
        "format": "boolean",
        "name": "round",
      },
      Object {
        "defaultValue": "medium",
        "description": "The size of the Meter.",
        "format": "xsmall
small
medium
large
xlarge
full
string",
        "name": "size",
      },
      Object {
        "defaultValue": "medium",
        "description": "The size of the Meter.",
        "format": "xsmall
small
medium
large
xlarge
string",
        "name": "thickness",
      },
      Object {
        "defaultValue": "bar",
        "description": "The visual type of meter.",
        "format": "bar
circle",
        "name": "type",
      },
      Object {
        "description": "Array of value objects describing the data.
      'value' is the actual numeric value.
      'label' is a text string describing it.
      'color' indicates the color name to use. If not specified a default one
      will be chosen.
      'onClick' will be called when the user clicks on it.
      Set 'highlight' to call attention to it.
      'onHover' will be called with a boolean argument indicating when the
      user hovers onto or away from it.",
        "format": "[{
  color: string,
  highlight: boolean,
  label: string,
  onClick: function,
  onHover: function,
  value: number
}]",
        "name": "values",
      },
    ],
    "usage": "import { Meter } from 'mnet-ui-base';
<Meter />",
  },
  "MnetUIBase": [Function],
  "ModalPopUp": [Function],
  "MultiSelect": [Function],
  "Nav": [Function],
  "Notification": [Function],
  "Pagination": Object {
    "$$typeof": Symbol(react.forward_ref),
    "displayName": "Pagination",
    "render": [Function],
  },
  "Paragraph": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Paragraph&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=paragraph&module=%2Fsrc%2FParagraph.js",
      },
    ],
    "description": "A paragraph of text.",
    "intrinsicElement": "p",
    "name": "Paragraph",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "What color to use to indicate the selection.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the width should fill the container.",
        "format": "boolean",
        "name": "fill",
      },
      Object {
        "defaultValue": true,
        "description": "Whether margin should be scaled for mobile environments.",
        "format": "boolean",
        "name": "responsive",
      },
      Object {
        "defaultValue": "medium",
        "description": "The size of the Paragraph text.",
        "format": "small
medium
large
xlarge
xxlarge
string",
        "name": "size",
      },
      Object {
        "defaultValue": "start",
        "description": "How to align the text inside the paragraph.",
        "format": "start
center
end",
        "name": "textAlign",
      },
    ],
    "usage": "import { Paragraph } from 'mnet-ui-base';
<Paragraph />",
  },
  "RadioButton": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=RadioButton&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=radiobutton&module=%2Fsrc%2FRadioButton.js",
      },
    ],
    "description": "A radio button control.",
    "details": "RadioButton should typically not be used directly.
      Instead, use RadioButtonGroup.",
    "intrinsicElement": "input",
    "name": "RadioButton",
    "properties": Array [
      Object {
        "description": "Same as React <input checked={} />",
        "format": "boolean",
        "name": "checked",
      },
      Object {
        "description": "Function that will be called to render the visual representation.
      It will be passed an object indicating whether the button is checked. It
      should return a react element.
      For example:
      \`children={({ checked }) => <Box ...>{...}</Box>}\`
      ",
        "format": "function",
        "name": "children",
      },
      Object {
        "description": "Same as React <input disabled={} />. Also adds a hidden input element
with the same name so form submissions work.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "The DOM id attribute value to use for the underlying <input/> element.",
        "format": "string",
        "name": "id",
      },
      Object {
        "description": "Label text to place next to the control.",
        "format": "node",
        "name": "label",
      },
      Object {
        "description": "The DOM name attribute value to use for the underlying <input/>
       element.",
        "format": "string",
        "name": "name",
        "required": true,
      },
      Object {
        "description": "Function that will be called when the user clicks the radio button. It
      will be passed a React event object. The current state can be accessed
      via event.target.checked. Same as React <input onChange={} />.",
        "format": "function",
        "name": "onChange",
      },
    ],
    "usage": "import { RadioButton } from 'mnet-ui-base';
<RadioButton />",
  },
  "RadioButtonGroup": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=RadioButtonGroup&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=radiobuttongroup&module=%2Fsrc%2FRadioButtonGroup.js",
      },
    ],
    "description": "A group of radio buttons.",
    "intrinsicElement": "div",
    "name": "RadioButtonGroup",
    "properties": Array [
      Object {
        "description": "Function that will be called to render the visual representation.
      It will be passed an object indicating whether the button is checked. It
      should return a react element.
      For example:
      \`children={(option, { checked }) => <Box ...>{...}</Box>}\`
      ",
        "format": "function",
        "name": "children",
      },
      Object {
        "defaultValue": false,
        "description": "Disables all options.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "The DOM name attribute value to use for the underlying <input/> 
      elements.",
        "format": "string",
        "name": "name",
        "required": true,
      },
      Object {
        "description": "Function that will be called when the user clicks on one of the radio
      buttons. It will be passed a React event object.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Options can be either a string or an object. 
    Each option is rendered as a single RadioButton.",
        "format": "[string]
[{
  disabled: boolean,
  id: string,
  label: 
    string
    element,
  value: string
}]",
        "name": "options",
        "required": true,
      },
      Object {
        "description": "Currently selected option value.",
        "format": "string
object",
        "name": "value",
      },
    ],
    "usage": "import { RadioButtonGroup } from 'mnet-ui-base';
<RadioButtonGroup />",
  },
  "RangeInput": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=RangeInput&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=rangeinput&module=%2Fsrc%2FRangeInput.js",
      },
    ],
    "description": "A slider control to input a value within a fixed range.",
    "intrinsicElement": "input",
    "name": "RangeInput",
    "properties": Array [
      Object {
        "description": "The id attribute of the range input.",
        "format": "string",
        "name": "id",
      },
      Object {
        "description": "The minimum value permitted.",
        "format": "number
string",
        "name": "min",
      },
      Object {
        "description": "The maximum value permitted.",
        "format": "number
string",
        "name": "max",
      },
      Object {
        "description": "The name attribute of the range input.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user changes the value. It will
      be passed an event object. The new input value will be available
      via 'event.target.value'.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "The step interval between values.",
        "format": "number",
        "name": "step",
      },
      Object {
        "description": "The current value.",
        "format": "number
string",
        "name": "value",
      },
    ],
    "usage": "import { RangeInput } from 'mnet-ui-base';
<RangeInput />",
  },
  "RangeSelector": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=RangeSelector&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=rangeselector&module=%2Fsrc%2FRangeSelector.js",
      },
    ],
    "description": "A control to input a range of values.",
    "intrinsicElement": "div",
    "name": "RangeSelector",
    "properties": Array [
      Object {
        "description": "What color to use to indicate the selection.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "defaultValue": "horizontal",
        "description": "",
        "format": "horizontal
vertical",
        "name": "direction",
      },
      Object {
        "description": "Whether to indicate what has not been selected.",
        "format": "boolean",
        "name": "invert",
      },
      Object {
        "defaultValue": 100,
        "description": "The maximum value permitted.",
        "format": "number",
        "name": "max",
      },
      Object {
        "description": "Custom messages used by screen readers for accessibility.",
        "format": "{
  lower: string,
  upper: string
}",
        "name": "messages",
      },
      Object {
        "defaultValue": 0,
        "description": "The minimum value permitted.",
        "format": "number",
        "name": "min",
      },
      Object {
        "description": "Function that will be called when the user changes one of the
      values. It will be passed an array of two numbers indicating
      the new values selected.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "defaultValue": "medium",
        "description": "Transparency of the selection indicator.",
        "format": "weak
medium
strong
string
boolean",
        "name": "opacity",
      },
      Object {
        "description": "How much to round the corners.",
        "format": "xsmall
small
medium
large
full
string",
        "name": "round",
      },
      Object {
        "defaultValue": "medium",
        "description": "How thick to make the selection indicator.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
full
string",
        "name": "size",
      },
      Object {
        "defaultValue": 1,
        "description": "The step interval between values.",
        "format": "number",
        "name": "step",
      },
      Object {
        "description": "The current values.",
        "format": "[number]",
        "name": "values",
        "required": true,
      },
    ],
    "usage": "import { RangeSelector } from 'mnet-ui-base';
<RangeSelector />",
  },
  "RoutedAnchor": [Function],
  "RoutedButton": [Function],
  "Select": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Select&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=select&module=%2Fsrc%2FSelect.js",
      },
    ],
    "description": "A control to select a value, with optional search.",
    "name": "Select",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Function that will be called when each option is rendered.
      It will be passed (option, index, options, state) where option
      is the option to render, index is the index of that option in the
      options array, and state is an object with
      { active, disabled, selected } keys indicating the current state
      of the option.",
        "format": "function",
        "name": "children",
      },
      Object {
        "defaultValue": true,
        "description": "Wether to close the drop when a selection is made.",
        "format": "boolean",
        "name": "closeOnChange",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the entire select or individual options should be disabled.
        An array of numbers indicates the indexes into 'options' of the
        disabled options. An array of strings or objects work the same way
        as the 'value' to indicate which options are disabled.",
        "format": "boolean
[
  number
  string
  object
]",
        "name": "disabled",
      },
      Object {
        "description": "When the options array contains objects, this property indicates how
      to determine which options should be disabled. If a string is
      provided, it is used as the key for each item object and if that key
      returns truthy, the option is disabled. If a function is provided, it is
      called with the option and the return value determines if the option
      is disabled.",
        "format": "string
function",
        "name": "disabledKey",
      },
      Object {
        "defaultValue": Object {
          "left": "left",
          "top": "bottom",
        },
        "description": "How to align the drop.",
        "format": "{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}",
        "name": "dropAlign",
      },
      Object {
        "description": "The height of the drop container.",
        "format": "xsmall
small
medium
large
xlarge
string",
        "name": "dropHeight",
      },
      Object {
        "description": "Target where the options drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the Select itself by default.",
        "format": "object",
        "name": "dropTarget",
      },
      Object {
        "description": "Any valid Drop prop.",
        "format": "object",
        "name": "dropProps",
      },
      Object {
        "description": "Whether when 'plain' it should receive a focus outline.",
        "format": "boolean",
        "name": "focusIndicator",
      },
      Object {
        "description": "A custom icon to be used when rendering the select. You can use false to
       not render an icon at all.",
        "format": "boolean
function
node",
        "name": "icon",
      },
      Object {
        "description": "When the options array contains objects, this property indicates how
      to determine the label of each option. If a string is
      provided, it is used as the key to retrieve each option's label.
      If a function is provided, it is called with the option and the
      return value indicates the label.",
        "format": "string
function",
        "name": "labelKey",
      },
      Object {
        "description": "Custom messages.",
        "format": "{
  multiple: string
}",
        "name": "messages",
      },
      Object {
        "description": "Whether to allow multiple options to be selected.",
        "format": "boolean",
        "name": "multiple",
      },
      Object {
        "description": "The name of the attribute when in a Form or FormField.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user selects an option.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Function that will be called when the Select drop closes.",
        "format": "function",
        "name": "onClose",
      },
      Object {
        "description": "Function that will be called when the Select drop opens.",
        "format": "function",
        "name": "onOpen",
      },
      Object {
        "description": "Function that will be called when the user types in the search input.
      If this property is not provided, no search field will be rendered.",
        "format": "function",
        "name": "onSearch",
      },
      Object {
        "description": "Use this to indicate that 'items' doesn't contain all that it could.
      It will be called when the entire list of items has been rendered.
      This might be used when the total number of items that could be retrieved
      is more than you'd want to load into the browser. 'onMore' allows you
      to lazily fetch more from the server only when needed.",
        "format": "function",
        "name": "onMore",
      },
      Object {
        "description": "Options can be either a string or an object. If an object is used, use
      children callback in order to render anything based on the current item.",
        "format": "[
  string
  number
  boolean
  element
  object
]",
        "name": "options",
        "required": true,
      },
      Object {
        "description": "Control the state of the component.",
        "format": "boolean",
        "name": "open",
      },
      Object {
        "description": "Placeholder to use when no value is provided.",
        "format": "string
element
node",
        "name": "placeholder",
      },
      Object {
        "description": "Whether this is a plain Select input with no border or padding.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "defaultValue": true,
        "description": "Whether to replace previously rendered items with a generic spacing
      element when they have scrolled out of view. This is more performant but
      means that in-page searching will not find elements that have been
      replaced.",
        "format": "boolean",
        "name": "replace",
      },
      Object {
        "description": "Placeholder text to use in the search box when the search input is 
      empty.",
        "format": "string",
        "name": "searchPlaceholder",
      },
      Object {
        "description": "Index of the currently selected option. When multiple, the set of
      options selected. NOTE: This is deprecated in favor of indicating
      the selected values via the 'value' property.",
        "format": "number
[number]",
        "name": "selected",
      },
      Object {
        "description": "The size of the text and icon.",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
      Object {
        "description": "Currently selected value. This can be an array
      when multiple. Passing an element allows the caller to control how
      the value is rendered. Passing an element is deprecated. Instead,
      use the 'valueLabel' property.",
        "format": "string
element
object
number
[
  string
  object
  number
]",
        "name": "value",
      },
      Object {
        "description": "Provides custom rendering of the value. If not provided, Select
      will render the value automatically.",
        "format": "node",
        "name": "valueLabel",
      },
      Object {
        "description": "When the options array contains objects, this property indicates how
      to determine the value of each option. If a string is
      provided, it is used as the key to retrieve each option's value.
      If a function is provided, it is called with the option and the
      return value indicates the value. If reduce is true, the value
      coming via the key will be used for the onChange value and the value
      property is expected to be reduced to align.",
        "format": "string
function
{
  key: string,
  reduce: boolean
}",
        "name": "valueKey",
      },
      Object {
        "defaultValue": "No matches found",
        "description": "Empty option message to display when no matching results were found",
        "format": "string",
        "name": "emptySearchMessage",
      },
      Object {
        "description": "Render custom search component",
        "format": "function",
        "name": "customSearch",
      },
      Object {
        "description": "Render custom top panel component above the option list",
        "format": "function",
        "name": "renderOptionTop",
      },
      Object {
        "description": "Render custom bottom panel component below the option list",
        "format": "function",
        "name": "renderOptionBottom",
      },
      Object {
        "description": "Render custom select component",
        "format": "function",
        "name": "renderCustomContent",
      },
    ],
    "usage": "import { Select } from 'mnet-ui-base';
<Select />",
  },
  "Sidebar": [Function],
  "SkipLink": [Function],
  "SkipLinkTarget": [Function],
  "SkipLinks": [Function],
  "Stack": [Function],
  "Tab": Object {
    "description": "One tab within Tabs.",
    "intrinsicElement": "button",
    "name": "Tab",
    "properties": Array [
      Object {
        "defaultValue": false,
        "description": "Whether the tab is disabled.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "Icon element to place in the tab.",
        "format": "element",
        "name": "icon",
      },
      Object {
        "defaultValue": false,
        "description": "Whether this is a plain tab with no style.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "defaultValue": false,
        "description": "Whether an icon and label should be reversed so that the icon is at the
              end of the tab.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "description": "The title of the tab.",
        "format": "node",
        "name": "title",
      },
    ],
    "usage": "import { Tab } from 'mnet-ui-base';
<Tab />",
  },
  "Table": [Function],
  "TableBody": Object {
    "description": "The body of a table.",
    "intrinsicElement": "tbody",
    "name": "TableBody",
    "usage": "import { TableBody } from 'mnet-ui-base';
<TableBody />",
  },
  "TableCell": Object {
    "description": "A cell of data in a table.",
    "intrinsicElement": "td",
    "name": "TableCell",
    "properties": Array [
      Object {
        "defaultValue": false,
        "description": "Whether default styling context should be removed.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "description": "For header cells, what scope the header is for.
        Typically, the cells in a TableHeader have 'col' scope and
        the primary cell in each row in the TableBody has 'row' scope.",
        "format": "col
row",
        "name": "scope",
      },
      Object {
        "description": "What size the cell should be. Typically, this is not needed
      unless you are trying to align multiple tables.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
1/2
1/3
2/3
1/4
2/4
3/4
string",
        "name": "size",
      },
      Object {
        "description": "How to align the contents vertically.",
        "format": "top
middle
bottom",
        "name": "verticalAlign",
      },
    ],
    "usage": "import { TableCell } from 'mnet-ui-base';
<TableCell />",
  },
  "TableFooter": [Function],
  "TableHeader": [Function],
  "TableRow": Object {
    "description": "A row of cells in a table.",
    "intrinsicElement": "tr",
    "name": "TableRow",
    "usage": "import { TableRow } from 'mnet-ui-base';
<TableRow />",
  },
  "Tabs": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Tabs&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=tabs&module=%2Fsrc%2FTabs.js",
      },
    ],
    "description": "A container with controls to show one Tab at a time.",
    "intrinsicElement": "div",
    "name": "Tabs",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Active tab index. If specified, Tabs will be a controlled component.
This means that future tab changes will not work unless you subscribe to
onActive function and update activeIndex accordingly.",
        "format": "number",
        "name": "activeIndex",
      },
      Object {
        "description": "Array of Tab.",
        "format": "node",
        "name": "children",
        "required": true,
      },
      Object {
        "description": "Whether flex-grow and/or flex-shrink is true.",
        "format": "grow
shrink
boolean",
        "name": "flex",
      },
      Object {
        "defaultValue": "center",
        "description": "How to align the tabs along the main axis.",
        "format": "start
center
end",
        "name": "justify",
      },
      Object {
        "defaultValue": Object {
          "tabContents": "Tab Contents",
        },
        "description": "Custom messages for Tabs. Used for accessibility by screen readers.",
        "format": "{
  tabContents: string
}",
        "name": "messages",
      },
      Object {
        "description": "Function that will be called with the active tab index when the
currently active tab changes.",
        "format": "function",
        "name": "onActive",
      },
    ],
    "usage": "import { Tabs, Tab } from 'mnet-ui-base';
<Tabs>
  <Tab title='Tab 1'>...</Tab>
  <Tab title='Tab 2'>...</Tab>
</Tabs>",
  },
  "Text": [Function],
  "TextArea": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=TextArea&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=textarea&module=%2Fsrc%2FTextArea.js",
      },
    ],
    "description": "A control to input multiple lines of text.",
    "intrinsicElement": "textarea",
    "name": "TextArea",
    "properties": Array [
      Object {
        "description": "The id attribute of the textarea.",
        "format": "string",
        "name": "id",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the width and height should fill the container.",
        "format": "boolean",
        "name": "fill",
      },
      Object {
        "description": "Whether the plain textarea should receive a focus outline.",
        "format": "boolean",
        "name": "focusIndicator",
      },
      Object {
        "description": "The name attribute of the textarea.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user types in the textarea.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Placeholder text to use when no value is provided.",
        "format": "string",
        "name": "placeholder",
      },
      Object {
        "description": "Whether this is a plain textarea with no border or padding.
Only use this when the containing context provides sufficient affordance.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "description": "What text to put in the textarea.",
        "format": "string",
        "name": "value",
      },
      Object {
        "defaultValue": true,
        "description": "Whether user is allowed to resize the textarea.",
        "format": "vertical
horizontal
boolean",
        "name": "resize",
      },
      Object {
        "description": "The size of the TextArea.",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
    ],
    "usage": "import { TextArea } from 'mnet-ui-base';
<TextArea id='item' name='item' />",
  },
  "TextInput": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=TextInput&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=textinput&module=%2Fsrc%2FTextInput.js",
      },
    ],
    "description": "A control to input a single line of text, with optional suggestions.",
    "intrinsicElement": "input",
    "name": "TextInput",
    "properties": Array [
      Object {
        "defaultValue": Object {
          "left": "left",
          "top": "bottom",
        },
        "description": "How to align the drop.",
        "format": "{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}",
        "name": "dropAlign",
      },
      Object {
        "description": "The height of the drop container.",
        "format": "xsmall
small
medium
large
xlarge
string",
        "name": "dropHeight",
      },
      Object {
        "description": "Target where any suggestions drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the TextInput itself by default.",
        "format": "object",
        "name": "dropTarget",
      },
      Object {
        "description": "Any valid Drop prop.",
        "format": "object",
        "name": "dropProps",
      },
      Object {
        "description": "An optional icon to show. This could be used to provide an
      indication of what kind of input is expected, like an email icon,
      or what the input will be used for, like a search icon.",
        "format": "element",
        "name": "icon",
      },
      Object {
        "description": "The id attribute of the input.",
        "format": "string",
        "name": "id",
      },
      Object {
        "description": "Whether the plain text input should receive a focus outline.",
        "format": "boolean",
        "name": "focusIndicator",
      },
      Object {
        "defaultValue": Object {
          "enterSelect": "(Press Enter to Select)",
          "suggestionIsOpen": "Suggestions drop is open, continue to use arrow keys to navigate",
          "suggestionsCount": "suggestions available",
          "suggestionsExist": "This input has suggestions use arrow keys to navigate",
        },
        "description": "Custom messages for TextInput. Used for accessibility by screen 
        readers.",
        "format": "{
  enterSelect: string,
  suggestionsCount: string,
  suggestionsExist: string,
  suggestionIsOpen: string
}",
        "name": "messages",
      },
      Object {
        "description": "The name of the attribute when in a Form or FormField.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user types in the input.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Function that will be called when the user selects a suggestion.
The suggestion contains the object chosen from the supplied suggestions.",
        "format": "function",
        "name": "onSelect",
      },
      Object {
        "description": "Function that will be called when the suggestions drop is opened.",
        "format": "function",
        "name": "onSuggestionsOpen",
      },
      Object {
        "description": "Function that will be called when the suggestions drop is closed.",
        "format": "function",
        "name": "onSuggestionsClose",
      },
      Object {
        "description": "Placeholder to use when no value is provided.",
        "format": "node",
        "name": "placeholder",
      },
      Object {
        "description": "Whether this is a plain input with no border or padding.
Only use this when the containing context provides sufficient affordance",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "description": "Whether an icon should be reversed so that the icon is at the
      end of the input.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "description": "The size of the TextInput.",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
      Object {
        "description": "Suggestions to show. It is recommended to avoid showing too many
suggestions and instead rely on the user to type more.",
        "format": "[
  {
    label: node,
    value: any
  }
  string
]",
        "name": "suggestions",
      },
      Object {
        "description": "What text to put in the input.",
        "format": "string
number",
        "name": "value",
      },
    ],
    "usage": "import { TextInput } from 'mnet-ui-base';
<TextInput id='item' name='item' />",
  },
  "Tooltip": Object {
    "$$typeof": Symbol(react.forward_ref),
    "displayName": "Tooltip",
    "render": [Function],
  },
  "__esModule": true,
  "addNotification": [Function],
  "addToast": [Function],
  "closeConfirmAlert": [Function],
  "modalIsLoading": [Function],
  "openConfirmAlert": [Function],
  "removeNotification": [Function],
}
`;
